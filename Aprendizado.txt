
modulo 1
Criamos um novo projeto React;
Criamos componentes funcionais;
Estilizamos componentes com CSS;
Analisamos as dependências do projeto;
Analisamos os comandos disponíveis no package.json.

modulo 2:
Aprendemos como passar props para um componente;
Renderizamos listas com o .map;
Trabalhamos com elementos aninhados usando a prop children;
Ouvimos elementos disparados pelo DOM: o onSubmit do nosso form.

modulo 3:
Ler e interpretar mensagens de erro;
Corrigir erros;
Depurar o seu código com o debugger.

modulo 4: 
Controlar inputs utilizando value e onChange;
Gerenciar o estado de um componente, utilizando o useState;
Trabalhar com props que são funções.

modulo 5:

Manipular e transformar arrays de objetos;
Filtrar itens de um array;
Renderização condicional.

modulo 6: 
Como criar uma nova prop;
Como passar esta prop para inúmeros componentes;
O que é uma closure e como utilizá-la a seu favor;
Como instalar novas dependências na sua aplicação;
Diferença entre export e export default.


modulo 7:
A diferença entre two-way data binding e one-way data binding;
Por que o React utiliza one-way data binding;
Por que utilizar id é importante no React.


sites uteis:

https://ant.design/ - componentes prontos
https://mui.com/ - componentes prontos
https://ant.design/docs/react/introduce

publicação de site: Vercel.com

https://www.alura.com.br/formacao-next-js
https://www.alura.com.br/formacao-react-ts

---------------------------------------------------------------------------------------------------------

Olá, Guilherme! Tudo bem?

Você está absolutamente certo em pensar sobre a organização do código, especialmente em projetos maiores. 
Manter todas as funções no arquivo App.js pode realmente tornar o código difícil de manter e entender. Para lidar com isso, existem algumas boas práticas e padrões de projeto que você pode considerar:

Componentização: Divida sua aplicação em componentes menores e mais gerenciáveis. Cada componente deve ter uma responsabilidade clara. Por exemplo, se você tem uma lista de tarefas, pode ter um componente TaskList e um componente TaskItem.

Separação de Funções: Em vez de definir todas as funções no App.js, você pode movê-las para arquivos separados. Por exemplo, se uma função é usada apenas por um componente específico, considere defini-la dentro do arquivo desse componente ou em um arquivo de utilidades.

Arquitetura em Camadas: Adote uma estrutura de pastas que reflita a arquitetura da sua aplicação. Por exemplo:

components/: para componentes reutilizáveis.
pages/: para componentes que representam páginas inteiras.
utils/: para funções auxiliares que podem ser usadas em vários lugares.